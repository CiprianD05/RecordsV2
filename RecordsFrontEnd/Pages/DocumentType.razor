@page "/documenttype"
@page "/documenttype/{id:int}"
@inject IDocumentTypeService documentTypeService
@inject NavigationManager navigationManager

@if (Id == null)
{
    <PageTitle>Create a new Document Type</PageTitle>
    <h3>Create a new Document Type</h3>
    <EditForm Model="documentTypeCreateDTO" OnValidSubmit="HandleSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div>
            <label for="name">Name</label>
            <InputText id="name" @bind-Value="documentTypeCreateDTO.Name" class="form-control"></InputText>
            <ValidationMessage For="@(() =>documentTypeCreateDTO.Name)" />
        </div>      

        <br />

        <button type="submit" class="btn btn-primary">@btnText</button>
    </EditForm>
}
else
{
    <PageTitle>Edit @documentTypeReadDTO.Name</PageTitle>

    <h3>Edit @documentTypeReadDTO.Name</h3>

    <EditForm Model="documentTypeUpdateDTO" OnValidSubmit="HandleSubmit">

        <DataAnnotationsValidator />
        <ValidationSummary />

        <div>
            <label for="name">Name</label>
            <InputText id="name" @bind-Value="documentTypeUpdateDTO.Name" class="form-control"></InputText>
            <ValidationMessage For="@(() => documentTypeUpdateDTO.Name)" />
        </div>

        

        <br />

        <button type="submit" class="btn btn-primary">@btnText</button>
    </EditForm>

}


@code {

    [Parameter]
    public int? Id { get; set; }

    public DocumentTypeReadDTO documentTypeReadDTO = new DocumentTypeReadDTO();
    public DocumentTypeCreateDTO documentTypeCreateDTO = new DocumentTypeCreateDTO();
    public DocumentTypeUpdateDTO documentTypeUpdateDTO = new DocumentTypeUpdateDTO();
    string btnText = string.Empty;



    protected override async Task OnParametersSetAsync()
    {
        if (Id != null)
        {
            var response = await documentTypeService.GetDocumentType((int)Id);

            if (response.IsSuccessStatusCode)
            {
                documentTypeReadDTO = await response.Content.ReadFromJsonAsync<DocumentTypeReadDTO>();
                documentTypeUpdateDTO.Name = documentTypeReadDTO.Name;
               
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("notfound/");
            }
        }

    }

    protected override async Task OnInitializedAsync()
    {
        btnText = Id == null ? "Save new document type" : "Actualize the document type";
    }

    async Task HandleSubmit()
    {
        if (Id == null)
        {
            var response = await documentTypeService.CreateDocumentType(documentTypeCreateDTO);

            if (response.StatusCode == System.Net.HttpStatusCode.Created)
            {

                navigationManager.NavigateTo("/documenttypes");

            }
            else
            {
                navigationManager.NavigateTo("notfound/");
            }
        }
        else
        {
            var response = await documentTypeService.UpdateDocumentType((int)Id, documentTypeUpdateDTO);

            if (response.IsSuccessStatusCode)
            {
                navigationManager.NavigateTo("/documenttypes");

            }
            else
            {
                navigationManager.NavigateTo("notfound/");
            }
        }

    }

}

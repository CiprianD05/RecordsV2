@page "/documents/{CitizenId:int}"
@inject IDocumentService DocumentService
@inject NavigationManager navigationManager
@inject IJSRuntime JsRuntime

<PageTitle>Documents</PageTitle>
<head>
    
</head>
<h3>Documents</h3>



<table class="table table-hover">
    <thead>
        <tr>
            <th>Id</th>
            <th>DocumentNameName</th>            
            <th>Edit Document</th>
            <th>Delete Document</th>
            


        </tr>
    </thead>
    <tbody>
        @foreach (var document in DocumentService.Documents)
        {
            <tr>
                <td>@document.Id</td>
                <td>
                    <a @onclick="() => DownloadPdf(document.Id,document.Name)">@document.Name</a>
                    

                </td>
                
                <td>
                    <button class="btn btn-primary" @onclick="(()=>ShowDocument(document.Id))"><i class="oi oi-pencil"></i></button>
                </td>

                <td>
                    <button class="btn btn-danger" @onclick="(()=>DeleteDocument(document.Id))"><i class="oi oi-delete"></i></button>
                </td>

               

            </tr>
        }
    </tbody>
</table>

<button class="btn btn-primary" @onclick="(()=>CreateDocument(CitizenId))">Add new document</button>





@code {
    [Parameter]
    public int CitizenId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await DocumentService.GetDocuments(CitizenId);
    }

   
    void ShowDocument(int documentId)
    {
        navigationManager.NavigateTo($"document/{documentId}");
    }

    void CreateDocument(int citizenId)
    {
        navigationManager.NavigateTo($"document/citizen/{citizenId}");
    }

    async Task DeleteDocument(int id)
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure?");
        if (confirmed)
        {
            var response = await DocumentService.DeleteDocument(id);

            if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo($"notfound/");
            }

            await DocumentService.GetDocuments(CitizenId);
            //StateHasChanged();
        }

    }
    private async Task DownloadPdf(int id, string fileName)
    {
        
        var pdfContent = await DocumentService.DownloadPdf(id);

        await JsRuntime.InvokeVoidAsync("openPdfInBrowser", pdfContent, fileName);
    }
}
